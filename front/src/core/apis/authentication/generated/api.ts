/* tslint:disable */
/* eslint-disable */
/**
 * Api documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from "./configuration";
import globalAxios, { AxiosInstance, AxiosPromise, AxiosRequestConfig } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
	assertParamExists,
	createRequestFunction,
	DUMMY_BASE_URL,
	serializeDataIfNeeded,
	setApiKeyToObject,
	setBasicAuthToObject,
	setBearerAuthToObject,
	setOAuthToObject,
	setSearchParams,
	toPathString,
} from "./common";
// @ts-ignore
import { BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError } from "./base";

/**
 *
 * @export
 * @interface AddUserModel
 */
export interface AddUserModel {
	/**
	 *
	 * @type {string}
	 * @memberof AddUserModel
	 */
	hash: string;
	/**
	 *
	 * @type {string}
	 * @memberof AddUserModel
	 */
	username: string;
}

/**
 *
 * @export
 * @interface AuthorizationAuthenticationModel
 */
export interface AuthorizationAuthenticationModel {
	/**
	 *
	 * @type {Array<string>}
	 * @memberof AuthorizationAuthenticationModel
	 */
	roles: Array<AuthorizationAuthenticationModelRolesEnum>;
}

/**
 * @export
 * @enum {string}
 */
export enum AuthorizationAuthenticationModelRolesEnum {
	User = "User",
	Admin = "Admin",
}

/**
 *
 * @export
 * @interface AuthorizationModel
 */
export interface AuthorizationModel {
	/**
	 *
	 * @type {AuthorizationAuthenticationModel}
	 * @memberof AuthorizationModel
	 */
	authentication?: AuthorizationAuthenticationModel;
}

/**
 *
 * @export
 * @interface CredentialsModel
 */
export interface CredentialsModel {
	/**
	 *
	 * @type {DockerModel}
	 * @memberof CredentialsModel
	 */
	docker?: DockerModel;
	/**
	 *
	 * @type {GithubModel}
	 * @memberof CredentialsModel
	 */
	github?: GithubModel;
}

/**
 *
 * @export
 * @interface DockerModel
 */
export interface DockerModel {
	/**
	 *
	 * @type {string}
	 * @memberof DockerModel
	 */
	password: string;
	/**
	 *
	 * @type {string}
	 * @memberof DockerModel
	 */
	username: string;
}

/**
 *
 * @export
 * @interface Forbidden
 */
export interface Forbidden {
	/**
	 * The error name
	 * @type {string}
	 * @memberof Forbidden
	 */
	name: string;
	/**
	 * An error message
	 * @type {string}
	 * @memberof Forbidden
	 */
	message: string;
	/**
	 * The status code of the exception
	 * @type {number}
	 * @memberof Forbidden
	 */
	status: number;
	/**
	 * A list of related errors
	 * @type {Array<GenericError>}
	 * @memberof Forbidden
	 */
	errors?: Array<GenericError>;
	/**
	 * The stack trace (only in development mode)
	 * @type {string}
	 * @memberof Forbidden
	 */
	stack?: string;
}

/**
 *
 * @export
 * @interface FrontThemeReturnModel
 */
export interface FrontThemeReturnModel {
	/**
	 *
	 * @type {string}
	 * @memberof FrontThemeReturnModel
	 */
	theme: FrontThemeReturnModelThemeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum FrontThemeReturnModelThemeEnum {
	Dark = "dark",
	Light = "light",
}

/**
 *
 * @export
 * @interface GenericError
 */
export interface GenericError {
	/**
	 * The error name
	 * @type {string}
	 * @memberof GenericError
	 */
	name: string;
	/**
	 * An error message
	 * @type {string}
	 * @memberof GenericError
	 */
	message: string;

	[key: string]: object | any;
}

/**
 *
 * @export
 * @interface GithubModel
 */
export interface GithubModel {
	/**
	 *
	 * @type {string}
	 * @memberof GithubModel
	 */
	token: string;
	/**
	 *
	 * @type {string}
	 * @memberof GithubModel
	 */
	user: string;
}

/**
 *
 * @export
 * @interface PostLoginInitRequest
 */
export interface PostLoginInitRequest {
	/**
	 *
	 * @type {string}
	 * @memberof PostLoginInitRequest
	 */
	hash?: string;
	/**
	 *
	 * @type {string}
	 * @memberof PostLoginInitRequest
	 */
	name: string;
}

/**
 *
 * @export
 * @interface PostLoginModel
 */
export interface PostLoginModel {
	/**
	 *
	 * @type {string}
	 * @memberof PostLoginModel
	 */
	token: string;
	/**
	 *
	 * @type {string}
	 * @memberof PostLoginModel
	 */
	comment?: string;
}

/**
 *
 * @export
 * @interface PostLoginModelWithSalt
 */
export interface PostLoginModelWithSalt {
	/**
	 *
	 * @type {string}
	 * @memberof PostLoginModelWithSalt
	 */
	salt: string;
}

/**
 *
 * @export
 * @interface PostLoginRequest
 */
export interface PostLoginRequest {
	/**
	 *
	 * @type {string}
	 * @memberof PostLoginRequest
	 */
	hash: string;
	/**
	 *
	 * @type {string}
	 * @memberof PostLoginRequest
	 */
	name: string;
}

/**
 *
 * @export
 * @interface SetUserSettingsModel
 */
export interface SetUserSettingsModel {
	/**
	 *
	 * @type {string}
	 * @memberof SetUserSettingsModel
	 */
	theme?: SetUserSettingsModelThemeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum SetUserSettingsModelThemeEnum {
	Light = "light",
	System = "system",
	Dark = "dark",
}

/**
 *
 * @export
 * @interface Unauthorized
 */
export interface Unauthorized {
	/**
	 * The error name
	 * @type {string}
	 * @memberof Unauthorized
	 */
	name: string;
	/**
	 * An error message
	 * @type {string}
	 * @memberof Unauthorized
	 */
	message: string;
	/**
	 * The status code of the exception
	 * @type {number}
	 * @memberof Unauthorized
	 */
	status: number;
	/**
	 * A list of related errors
	 * @type {Array<GenericError>}
	 * @memberof Unauthorized
	 */
	errors?: Array<GenericError>;
	/**
	 * The stack trace (only in development mode)
	 * @type {string}
	 * @memberof Unauthorized
	 */
	stack?: string;
}

/**
 *
 * @export
 * @interface UserSettingsModel
 */
export interface UserSettingsModel {
	/**
	 *
	 * @type {string}
	 * @memberof UserSettingsModel
	 */
	theme: UserSettingsModelThemeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum UserSettingsModelThemeEnum {
	Light = "light",
	System = "system",
	Dark = "dark",
}

/**
 * AuthenticationApi - axios parameter creator
 * @export
 */
export const AuthenticationApiAxiosParamCreator = function(configuration?: Configuration) {
	return {
		/**
		 * Return all logged users (Not available in production)
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		get: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/authentication/logged`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Login second step: check if the token provided match with the one computed by the server
		 * @param {PostLoginRequest} postLoginRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		login: async (postLoginRequest: PostLoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'postLoginRequest' is not null or undefined
			assertParamExists("login", "postLoginRequest", postLoginRequest);
			const localVarPath = `/api/authentication/login`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(postLoginRequest, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Login first step: create a salt from user\'s name
		 * @param {PostLoginInitRequest} [postLoginInitRequest]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		loginInit: async (postLoginInitRequest?: PostLoginInitRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/authentication/login/init`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(postLoginInitRequest, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} [authenticationLogin]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		logout: async (authenticationLogin?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/authentication/login`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} [token]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		validToken: async (token?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			const localVarPath = `/api/authentication/valid`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (token !== undefined) {
				localVarQueryParameter["token"] = token;
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * AuthenticationApi - functional programming interface
 * @export
 */
export const AuthenticationApiFp = function(configuration?: Configuration) {
	const localVarAxiosParamCreator = AuthenticationApiAxiosParamCreator(configuration);
	return {
		/**
		 * Return all logged users (Not available in production)
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async get(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.get(options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 * Login second step: check if the token provided match with the one computed by the server
		 * @param {PostLoginRequest} postLoginRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async login(postLoginRequest: PostLoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostLoginModel>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.login(postLoginRequest, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 * Login first step: create a salt from user\'s name
		 * @param {PostLoginInitRequest} [postLoginInitRequest]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async loginInit(
			postLoginInitRequest?: PostLoginInitRequest,
			options?: AxiosRequestConfig,
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostLoginModelWithSalt>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.loginInit(postLoginInitRequest, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} [authenticationLogin]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async logout(authenticationLogin?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.logout(authenticationLogin, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} [token]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async validToken(token?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.validToken(token, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * AuthenticationApi - factory interface
 * @export
 */
export const AuthenticationApiFactory = function(configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = AuthenticationApiFp(configuration);
	return {
		/**
		 * Return all logged users (Not available in production)
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		get(options?: any): AxiosPromise<void> {
			return localVarFp.get(options).then((request) => request(axios, basePath));
		},
		/**
		 * Login second step: check if the token provided match with the one computed by the server
		 * @param {PostLoginRequest} postLoginRequest
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		login(postLoginRequest: PostLoginRequest, options?: any): AxiosPromise<PostLoginModel> {
			return localVarFp.login(postLoginRequest, options).then((request) => request(axios, basePath));
		},
		/**
		 * Login first step: create a salt from user\'s name
		 * @param {PostLoginInitRequest} [postLoginInitRequest]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		loginInit(postLoginInitRequest?: PostLoginInitRequest, options?: any): AxiosPromise<PostLoginModelWithSalt> {
			return localVarFp.loginInit(postLoginInitRequest, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} [authenticationLogin]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		logout(authenticationLogin?: string, options?: any): AxiosPromise<void> {
			return localVarFp.logout(authenticationLogin, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} [token]
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		validToken(token?: string, options?: any): AxiosPromise<boolean> {
			return localVarFp.validToken(token, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * AuthenticationApi - object-oriented interface
 * @export
 * @class AuthenticationApi
 * @extends {BaseAPI}
 */
export class AuthenticationApi extends BaseAPI {
	/**
	 * Return all logged users (Not available in production)
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthenticationApi
	 */
	public get(options?: AxiosRequestConfig) {
		return AuthenticationApiFp(this.configuration)
			.get(options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Login second step: check if the token provided match with the one computed by the server
	 * @param {PostLoginRequest} postLoginRequest
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthenticationApi
	 */
	public login(postLoginRequest: PostLoginRequest, options?: AxiosRequestConfig) {
		return AuthenticationApiFp(this.configuration)
			.login(postLoginRequest, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Login first step: create a salt from user\'s name
	 * @param {PostLoginInitRequest} [postLoginInitRequest]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthenticationApi
	 */
	public loginInit(postLoginInitRequest?: PostLoginInitRequest, options?: AxiosRequestConfig) {
		return AuthenticationApiFp(this.configuration)
			.loginInit(postLoginInitRequest, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} [authenticationLogin]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthenticationApi
	 */
	public logout(authenticationLogin?: string, options?: AxiosRequestConfig) {
		return AuthenticationApiFp(this.configuration)
			.logout(authenticationLogin, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} [token]
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof AuthenticationApi
	 */
	public validToken(token?: string, options?: AxiosRequestConfig) {
		return AuthenticationApiFp(this.configuration)
			.validToken(token, options)
			.then((request) => request(this.axios, this.basePath));
	}
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function(configuration?: Configuration) {
	return {
		/**
		 * Create an user
		 * @param {AddUserModel} addUserModel
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addUser: async (addUserModel: AddUserModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'addUserModel' is not null or undefined
			assertParamExists("addUser", "addUserModel", addUserModel);
			const localVarPath = `/api/users`;
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(addUserModel, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 * Return username or token of logged user
		 * @param {'username' | 'token'} kind
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getUserInfo: async (kind: "username" | "token", authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'kind' is not null or undefined
			assertParamExists("getUserInfo", "kind", kind);
			const localVarPath = `/api/users/{kind}`.replace(`{${"kind"}}`, encodeURIComponent(String(kind)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
	const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration);
	return {
		/**
		 * Create an user
		 * @param {AddUserModel} addUserModel
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async addUser(addUserModel: AddUserModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.addUser(addUserModel, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 * Return username or token of logged user
		 * @param {'username' | 'token'} kind
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getUserInfo(
			kind: "username" | "token",
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig,
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getUserInfo(kind, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function(configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = UsersApiFp(configuration);
	return {
		/**
		 * Create an user
		 * @param {AddUserModel} addUserModel
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		addUser(addUserModel: AddUserModel, options?: any): AxiosPromise<string> {
			return localVarFp.addUser(addUserModel, options).then((request) => request(axios, basePath));
		},
		/**
		 * Return username or token of logged user
		 * @param {'username' | 'token'} kind
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getUserInfo(kind: "username" | "token", authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<string> {
			return localVarFp.getUserInfo(kind, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
	/**
	 * Create an user
	 * @param {AddUserModel} addUserModel
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersApi
	 */
	public addUser(addUserModel: AddUserModel, options?: AxiosRequestConfig) {
		return UsersApiFp(this.configuration)
			.addUser(addUserModel, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 * Return username or token of logged user
	 * @param {'username' | 'token'} kind
	 * @param {string} [authenticationToken] Authorization in header
	 * @param {string} [authenticationToken2] Authorization in cookie
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersApi
	 */
	public getUserInfo(kind: "username" | "token", authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UsersApiFp(this.configuration)
			.getUserInfo(kind, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}
}

/**
 * UsersAuthorisationsApi - axios parameter creator
 * @export
 */
export const UsersAuthorisationsApiAxiosParamCreator = function(configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {string} username
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		get: async (username: string, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'username' is not null or undefined
			assertParamExists("get", "username", username);
			const localVarPath = `/api/users/{username}/authorisations`.replace(`{${"username"}}`, encodeURIComponent(String(username)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} username
		 * @param {AuthorizationModel} authorizationModel
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		set: async (
			username: string,
			authorizationModel: AuthorizationModel,
			authenticationToken?: string,
			authenticationToken2?: string,
			options: AxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'username' is not null or undefined
			assertParamExists("set", "username", username);
			// verify required parameter 'authorizationModel' is not null or undefined
			assertParamExists("set", "authorizationModel", authorizationModel);
			const localVarPath = `/api/users/{username}/authorisations`.replace(`{${"username"}}`, encodeURIComponent(String(username)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(authorizationModel, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * UsersAuthorisationsApi - functional programming interface
 * @export
 */
export const UsersAuthorisationsApiFp = function(configuration?: Configuration) {
	const localVarAxiosParamCreator = UsersAuthorisationsApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {string} username
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async get(
			username: string,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig,
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizationModel>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.get(username, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} username
		 * @param {AuthorizationModel} authorizationModel
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async set(
			username: string,
			authorizationModel: AuthorizationModel,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig,
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.set(username, authorizationModel, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * UsersAuthorisationsApi - factory interface
 * @export
 */
export const UsersAuthorisationsApiFactory = function(configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = UsersAuthorisationsApiFp(configuration);
	return {
		/**
		 *
		 * @param {string} username
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		get(username: string, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<AuthorizationModel> {
			return localVarFp.get(username, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} username
		 * @param {AuthorizationModel} authorizationModel
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		set(username: string, authorizationModel: AuthorizationModel, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<void> {
			return localVarFp.set(username, authorizationModel, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * UsersAuthorisationsApi - object-oriented interface
 * @export
 * @class UsersAuthorisationsApi
 * @extends {BaseAPI}
 */
export class UsersAuthorisationsApi extends BaseAPI {
	/**
	 *
	 * @param {string} username
	 * @param {string} [authenticationToken] Authorization in header
	 * @param {string} [authenticationToken2] Authorization in cookie
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersAuthorisationsApi
	 */
	public get(username: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UsersAuthorisationsApiFp(this.configuration)
			.get(username, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} username
	 * @param {AuthorizationModel} authorizationModel
	 * @param {string} [authenticationToken] Authorization in header
	 * @param {string} [authenticationToken2] Authorization in cookie
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersAuthorisationsApi
	 */
	public set(username: string, authorizationModel: AuthorizationModel, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UsersAuthorisationsApiFp(this.configuration)
			.set(username, authorizationModel, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}
}

/**
 * UsersCredentialsApi - axios parameter creator
 * @export
 */
export const UsersCredentialsApiAxiosParamCreator = function(configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {string} username
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		get: async (username: string, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'username' is not null or undefined
			assertParamExists("get", "username", username);
			const localVarPath = `/api/users/{username}/credentials`.replace(`{${"username"}}`, encodeURIComponent(String(username)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} username
		 * @param {CredentialsModel} credentialsModel
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		set: async (
			username: string,
			credentialsModel: CredentialsModel,
			authenticationToken?: string,
			authenticationToken2?: string,
			options: AxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'username' is not null or undefined
			assertParamExists("set", "username", username);
			// verify required parameter 'credentialsModel' is not null or undefined
			assertParamExists("set", "credentialsModel", credentialsModel);
			const localVarPath = `/api/users/{username}/credentials`.replace(`{${"username"}}`, encodeURIComponent(String(username)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(credentialsModel, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * UsersCredentialsApi - functional programming interface
 * @export
 */
export const UsersCredentialsApiFp = function(configuration?: Configuration) {
	const localVarAxiosParamCreator = UsersCredentialsApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {string} username
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async get(
			username: string,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig,
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CredentialsModel>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.get(username, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} username
		 * @param {CredentialsModel} credentialsModel
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async set(
			username: string,
			credentialsModel: CredentialsModel,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig,
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.set(username, credentialsModel, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * UsersCredentialsApi - factory interface
 * @export
 */
export const UsersCredentialsApiFactory = function(configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = UsersCredentialsApiFp(configuration);
	return {
		/**
		 *
		 * @param {string} username
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		get(username: string, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<CredentialsModel> {
			return localVarFp.get(username, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} username
		 * @param {CredentialsModel} credentialsModel
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		set(username: string, credentialsModel: CredentialsModel, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<void> {
			return localVarFp.set(username, credentialsModel, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * UsersCredentialsApi - object-oriented interface
 * @export
 * @class UsersCredentialsApi
 * @extends {BaseAPI}
 */
export class UsersCredentialsApi extends BaseAPI {
	/**
	 *
	 * @param {string} username
	 * @param {string} [authenticationToken] Authorization in header
	 * @param {string} [authenticationToken2] Authorization in cookie
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersCredentialsApi
	 */
	public get(username: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UsersCredentialsApiFp(this.configuration)
			.get(username, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} username
	 * @param {CredentialsModel} credentialsModel
	 * @param {string} [authenticationToken] Authorization in header
	 * @param {string} [authenticationToken2] Authorization in cookie
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersCredentialsApi
	 */
	public set(username: string, credentialsModel: CredentialsModel, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UsersCredentialsApiFp(this.configuration)
			.set(username, credentialsModel, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}
}

/**
 * UsersSettingsApi - axios parameter creator
 * @export
 */
export const UsersSettingsApiAxiosParamCreator = function(configuration?: Configuration) {
	return {
		/**
		 *
		 * @param {string} username
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		get: async (username: string, authenticationToken?: string, authenticationToken2?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
			// verify required parameter 'username' is not null or undefined
			assertParamExists("get", "username", username);
			const localVarPath = `/api/users/{username}/settings`.replace(`{${"username"}}`, encodeURIComponent(String(username)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} username
		 * @param {'dark' | 'light'} windowsTheme
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getTheme: async (
			username: string,
			windowsTheme: "dark" | "light",
			authenticationToken?: string,
			authenticationToken2?: string,
			options: AxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'username' is not null or undefined
			assertParamExists("getTheme", "username", username);
			// verify required parameter 'windowsTheme' is not null or undefined
			assertParamExists("getTheme", "windowsTheme", windowsTheme);
			const localVarPath = `/api/users/{username}/settings/theme`.replace(`{${"username"}}`, encodeURIComponent(String(username)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (windowsTheme !== undefined) {
				localVarQueryParameter["windows_theme"] = windowsTheme;
			}

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
		/**
		 *
		 * @param {string} username
		 * @param {SetUserSettingsModel} setUserSettingsModel
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		set: async (
			username: string,
			setUserSettingsModel: SetUserSettingsModel,
			authenticationToken?: string,
			authenticationToken2?: string,
			options: AxiosRequestConfig = {},
		): Promise<RequestArgs> => {
			// verify required parameter 'username' is not null or undefined
			assertParamExists("set", "username", username);
			// verify required parameter 'setUserSettingsModel' is not null or undefined
			assertParamExists("set", "setUserSettingsModel", setUserSettingsModel);
			const localVarPath = `/api/users/{username}/settings`.replace(`{${"username"}}`, encodeURIComponent(String(username)));
			// use dummy base URL string because the URL constructor only accepts absolute URLs.
			const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
			let baseOptions;
			if (configuration) {
				baseOptions = configuration.baseOptions;
			}

			const localVarRequestOptions = { method: "PATCH", ...baseOptions, ...options };
			const localVarHeaderParameter = {} as any;
			const localVarQueryParameter = {} as any;

			if (authenticationToken !== undefined && authenticationToken !== null) {
				localVarHeaderParameter["authentication-token"] = String(authenticationToken);
			}

			localVarHeaderParameter["Content-Type"] = "application/json";

			setSearchParams(localVarUrlObj, localVarQueryParameter);
			let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
			localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
			localVarRequestOptions.data = serializeDataIfNeeded(setUserSettingsModel, localVarRequestOptions, configuration);

			return {
				url: toPathString(localVarUrlObj),
				options: localVarRequestOptions,
			};
		},
	};
};

/**
 * UsersSettingsApi - functional programming interface
 * @export
 */
export const UsersSettingsApiFp = function(configuration?: Configuration) {
	const localVarAxiosParamCreator = UsersSettingsApiAxiosParamCreator(configuration);
	return {
		/**
		 *
		 * @param {string} username
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async get(
			username: string,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig,
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSettingsModel>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.get(username, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} username
		 * @param {'dark' | 'light'} windowsTheme
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async getTheme(
			username: string,
			windowsTheme: "dark" | "light",
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig,
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FrontThemeReturnModel>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.getTheme(username, windowsTheme, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
		/**
		 *
		 * @param {string} username
		 * @param {SetUserSettingsModel} setUserSettingsModel
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		async set(
			username: string,
			setUserSettingsModel: SetUserSettingsModel,
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: AxiosRequestConfig,
		): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
			const localVarAxiosArgs = await localVarAxiosParamCreator.set(username, setUserSettingsModel, authenticationToken, authenticationToken2, options);
			return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
		},
	};
};

/**
 * UsersSettingsApi - factory interface
 * @export
 */
export const UsersSettingsApiFactory = function(configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
	const localVarFp = UsersSettingsApiFp(configuration);
	return {
		/**
		 *
		 * @param {string} username
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		get(username: string, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<UserSettingsModel> {
			return localVarFp.get(username, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} username
		 * @param {'dark' | 'light'} windowsTheme
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		getTheme(
			username: string,
			windowsTheme: "dark" | "light",
			authenticationToken?: string,
			authenticationToken2?: string,
			options?: any,
		): AxiosPromise<FrontThemeReturnModel> {
			return localVarFp.getTheme(username, windowsTheme, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
		/**
		 *
		 * @param {string} username
		 * @param {SetUserSettingsModel} setUserSettingsModel
		 * @param {string} [authenticationToken] Authorization in header
		 * @param {string} [authenticationToken2] Authorization in cookie
		 * @param {*} [options] Override http request option.
		 * @throws {RequiredError}
		 */
		set(username: string, setUserSettingsModel: SetUserSettingsModel, authenticationToken?: string, authenticationToken2?: string, options?: any): AxiosPromise<object> {
			return localVarFp.set(username, setUserSettingsModel, authenticationToken, authenticationToken2, options).then((request) => request(axios, basePath));
		},
	};
};

/**
 * UsersSettingsApi - object-oriented interface
 * @export
 * @class UsersSettingsApi
 * @extends {BaseAPI}
 */
export class UsersSettingsApi extends BaseAPI {
	/**
	 *
	 * @param {string} username
	 * @param {string} [authenticationToken] Authorization in header
	 * @param {string} [authenticationToken2] Authorization in cookie
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersSettingsApi
	 */
	public get(username: string, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UsersSettingsApiFp(this.configuration)
			.get(username, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} username
	 * @param {'dark' | 'light'} windowsTheme
	 * @param {string} [authenticationToken] Authorization in header
	 * @param {string} [authenticationToken2] Authorization in cookie
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersSettingsApi
	 */
	public getTheme(username: string, windowsTheme: "dark" | "light", authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UsersSettingsApiFp(this.configuration)
			.getTheme(username, windowsTheme, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}

	/**
	 *
	 * @param {string} username
	 * @param {SetUserSettingsModel} setUserSettingsModel
	 * @param {string} [authenticationToken] Authorization in header
	 * @param {string} [authenticationToken2] Authorization in cookie
	 * @param {*} [options] Override http request option.
	 * @throws {RequiredError}
	 * @memberof UsersSettingsApi
	 */
	public set(username: string, setUserSettingsModel: SetUserSettingsModel, authenticationToken?: string, authenticationToken2?: string, options?: AxiosRequestConfig) {
		return UsersSettingsApiFp(this.configuration)
			.set(username, setUserSettingsModel, authenticationToken, authenticationToken2, options)
			.then((request) => request(this.axios, this.basePath));
	}
}
